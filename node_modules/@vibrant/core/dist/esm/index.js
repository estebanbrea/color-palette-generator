import { buildProcessOptions } from "./options.js";
import { Builder } from "./builder.js";
import { assignDeep } from "./utils.js";
import { BasicPipeline } from "./pipeline/index.js";
import { WorkerPipeline } from "./pipeline/worker/client.js";
import { runPipelineInWorker } from "./pipeline/worker/host.js";
const _Vibrant = class _Vibrant {
  constructor(_src, opts) {
    this._src = _src;
    this.opts = assignDeep({}, _Vibrant.DefaultOpts, opts);
  }
  static use(pipeline) {
    this._pipeline = pipeline;
  }
  static from(src) {
    return new Builder(src);
  }
  get result() {
    return this._result;
  }
  _process(image, opts) {
    image.scaleDown(this.opts);
    const processOpts = buildProcessOptions(this.opts, opts);
    return _Vibrant._pipeline.process(image.getImageData(), processOpts);
  }
  palette() {
    return this.swatches();
  }
  swatches() {
    throw new Error(
      "Method deprecated. Use `Vibrant.result.palettes[name]` instead"
    );
  }
  async getPalette() {
    const arg0 = arguments[0];
    const arg1 = arguments[1];
    const name = typeof arg0 === "string" ? arg0 : "default";
    const cb = typeof arg0 === "string" ? arg1 : arg0;
    const image = new this.opts.ImageClass();
    try {
      const image1 = await image.load(this._src);
      const result1 = await this._process(image1, {
        generators: [name]
      });
      this._result = result1;
      const res = result1.palettes[name];
      if (!res) {
        throw new Error(`Palette with name ${name} not found`);
      }
      image.remove();
      if (cb) {
        cb(void 0, res);
      }
      return res;
    } catch (err) {
      image.remove();
      if (cb) {
        cb(err);
      }
      return Promise.reject(err);
    }
  }
  async getPalettes() {
    const arg0 = arguments[0];
    const arg1 = arguments[1];
    const names = Array.isArray(arg0) ? arg0 : ["*"];
    const cb = Array.isArray(arg0) ? arg1 : arg0;
    const image = new this.opts.ImageClass();
    try {
      const image1 = await image.load(this._src);
      const result1 = await this._process(image1, {
        generators: names
      });
      this._result = result1;
      const res = result1.palettes;
      image.remove();
      if (cb) {
        cb(void 0, res);
      }
      return res;
    } catch (err) {
      image.remove();
      if (cb) {
        cb(err);
      }
      return Promise.reject(err);
    }
  }
};
_Vibrant.DefaultOpts = {
  colorCount: 64,
  quality: 5,
  filters: []
};
let Vibrant = _Vibrant;
export {
  BasicPipeline,
  Builder,
  Vibrant,
  WorkerPipeline,
  runPipelineInWorker
};
//# sourceMappingURL=index.js.map

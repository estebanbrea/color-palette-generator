// src/index.ts
import MagicString from "magic-string";
import { createFilter } from "@rollup/pluginutils";
function preserveDirectives({
  suppressPreserveModulesWarning,
  include = [],
  exclude = []
} = {}) {
  const excludePatterns = ["**/*.css", ...exclude];
  const filter = createFilter(include, excludePatterns);
  return {
    name: "preserve-directives",
    // Capture directives metadata during the transform phase
    transform(code, id) {
      var _a;
      if (!filter(id))
        return;
      const ast = this.parse(code);
      if (ast.type === "Program" && ast.body) {
        const directives = [];
        let i = 0;
        const filteredBody = ast.body.filter(Boolean);
        while (((_a = filteredBody[i]) == null ? void 0 : _a.type) === "ExpressionStatement") {
          const node = filteredBody[i];
          if ("directive" in node) {
            directives.push(node.directive);
          }
          i += 1;
        }
        if (directives.length > 0) {
          return {
            code,
            ast,
            map: null,
            meta: { preserveDirectives: directives }
          };
        }
      }
      return { code, ast, map: null };
    },
    // We check if this chunk has a module with extracted directives
    // and add that to the top.
    // Because we only run this when preserveModules: true there should
    // only be one module per chunk.
    // Banners will already have been inserted here, so directives always
    // ends up at the absolute top.
    renderChunk: {
      order: "post",
      handler(code, chunk, options) {
        var _a, _b;
        if (!options.preserveModules) {
          if (!suppressPreserveModulesWarning) {
            this.warn(
              "This plugin only works with the option preserveModules: true, if you want to add directives to the top of a bundled build, add it in a banner."
            );
          }
          return void 0;
        }
        let chunkHasDirectives = false;
        if ("modules" in chunk) {
          for (const moduleId of Object.keys(chunk.modules)) {
            const directives = (_b = (_a = this.getModuleInfo(moduleId)) == null ? void 0 : _a.meta) == null ? void 0 : _b.preserveDirectives;
            if (directives) {
              chunkHasDirectives = directives;
            }
          }
          if (chunkHasDirectives) {
            const directiveStrings = chunkHasDirectives.map((directive) => `"${directive}"`).join(";\n");
            const s = new MagicString(code);
            s.prepend(`${directiveStrings};
`);
            const srcMap = s.generateMap({ includeContent: true });
            return { code: s.toString(), map: srcMap };
          }
        }
        return null;
      }
    }
  };
}
var src_default = preserveDirectives;
export {
  src_default as default,
  preserveDirectives
};
